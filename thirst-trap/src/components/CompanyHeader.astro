---
import type { Company } from "../types/company";
import { severityRank } from "../lib/reasonTags";

const { company } = Astro.props as { company: Company };

/* -------- Media (robust) -------- */
const _logo =
  (company as any)?.logo?.data?.attributes ??
  (company as any)?.logo?.attributes ??
  (company as any)?.logo ?? {};

const logoUrl: string = _logo?.url || "";
const logoAlt: string = _logo?.alternativeText || `${company?.name} logo`;

/* -------- Category (robust) -------- */
const _cat =
  (company as any)?.category?.data?.attributes ??
  (company as any)?.category?.attributes ??
  (company as any)?.category ?? {};

const categoryName: string = _cat?.name || "";
const categoryColor: string | undefined = _cat?.color;

/* -------- Basics -------- */
const about: string = (company as any)?.about || "";

/* -------- Evaluation + reasoning tags (sorted by priority) -------- */
const evaln: any = (company as any)?.Evaluation ?? {};
const reasoningSummary: string =
  evaln?.summary || (company as any)?.reason?.data?.attributes?.description || "";

let reasoningTags: { name: string; color?: string; priority?: string }[] = [];
const rt = evaln?.reasoning_tags;

if (Array.isArray(rt?.data)) {
  reasoningTags = rt.data
    .map((x: any) => x?.attributes)
    .filter((a: any) => a?.name)
    .map((a: any) => ({ name: a.name, color: a.color, priority: a.priority }));
} else if (Array.isArray(rt)) {
  reasoningTags = rt
    .map((t: any) => t?.attributes ?? t)
    .filter((x: any) => x?.name)
    .map((x: any) => ({ name: x.name, color: x.color, priority: x.priority }));
}

reasoningTags.sort(
  (a, b) => severityRank(a.priority) - severityRank(b.priority) || a.name.localeCompare(b.name)
);

/* -------- Utils -------- */
function clamp(s = "", n = 220) { return s.length > n ? s.slice(0, n - 1) + "â€¦" : s; }
function textColorFor(bg?: string) {
  if (!bg || !bg.startsWith("#")) return "white";
  const hex = bg.length === 4 ? `#${bg[1]}${bg[1]}${bg[2]}${bg[2]}${bg[3]}${bg[3]}` : bg;
  const r = parseInt(hex.slice(1,3),16), g = parseInt(hex.slice(3,5),16), b = parseInt(hex.slice(5,7),16);
  const l = (0.299*r + 0.587*g + 0.114*b) / 255;
  return l > 0.6 ? "black" : "white";
}
---

<header class="flex items-start gap-4 mb-6">
  {logoUrl
    ? <img
        src={logoUrl}
        alt={logoAlt}
        class="h-20 w-20 sm:h-24 sm:w-24 shrink-0 rounded bg-base-200 object-contain"
        loading="lazy"
      />
    : <div class="h-20 w-20 sm:h-24 sm:w-24 shrink-0 rounded bg-base-200" />
  }

  <div class="min-w-0 flex-1">
    <h1 class="mb-1 leading-tight">{(company as any).name}</h1>

    {categoryName && (
      <div class="mt-1">
        <span
          class={`inline-flex items-center rounded-full px-2 py-[2px] text-xs font-medium ${
            categoryColor ? "" : "badge badge-ghost text-xs"
          }`}
          style={categoryColor
            ? `background:${categoryColor};color:${textColorFor(categoryColor)};border:none`
            : ""}
        >
          {categoryName}
        </span>
      </div>
    )}

    {about && (
      <p class="mt-3 text-base text-base-content/90 break-words">{clamp(about, 260)}</p>
    )}

    {reasoningSummary && (
      <p class="mt-2 text-sm text-base-content/90 break-words">
        <span class="font-semibold">Reason:</span> {clamp(reasoningSummary, 220)}
      </p>
    )}

    {reasoningTags.length > 0 && (
      <div class="mt-2 flex flex-wrap gap-2">
        {reasoningTags.slice(0, 8).map((t) => (
          <span class="badge text-xs"
                style={`background:${t.color ?? "var(--fallback-bc,#444)"};color:${textColorFor(t.color)};border:none`}>
            {t.name}
          </span>
        ))}
        {reasoningTags.length > 8 && (
          <span class="badge badge-outline text-xs">+{reasoningTags.length - 8}</span>
        )}
      </div>
    )}
  </div>
</header>
