---
// CompanyCard.astro
import type { Company } from "../types/company";

const { company } = Astro.props as { company: Company };

// Logo
const logoUrl = company?.logo?.url || "";
const logoAlt = company?.logo?.alternativeText || `${company?.name} logo`;

// (We still read category for data-* on the wrapper, but we don't render it)
const category =
  company?.category?.data?.attributes?.name ||
  company?.category?.attributes?.name ||
  company?.category?.name || "";

// Public tags
const tags: string[] = (company?.tags?.data ?? [])
  .map((t: any) => t?.attributes?.name)
  .filter(Boolean);

// Evaluation / Reasoning
const evaln: any = company?.Evaluation ?? {};
const sentiment = evaln?.sentiment as ("good" | "bad" | undefined);
const sentimentClass =
  sentiment === "good" ? "badge-success" :
  sentiment === "bad"  ? "badge-error"   : "";

const reasoningSummary: string = evaln?.summary || "";

// Rating (0–5)
function num(x: any) { const n = Number(x); return Number.isFinite(n) ? n : undefined; }
const _rating = num(evaln?.rating) ?? num(evaln?.score) ?? num(evaln?.severity);
const rating = _rating !== undefined ? Math.max(0, Math.min(5, _rating)) : undefined;

// Reasoning tags: supports both direct arrays and .data[].attributes
let reasoningTags: { name: string; color?: string }[] = [];
if (Array.isArray(evaln?.reasoning_tags)) {
  reasoningTags = evaln.reasoning_tags.map((t: any) => ({
    name: t?.attributes?.name ?? t?.name,
    color: t?.attributes?.color ?? t?.color,
  })).filter((x) => x?.name);
} else if (Array.isArray(evaln?.reasoning_tags?.data)) {
  reasoningTags = evaln.reasoning_tags.data
    .map((x: any) => x?.attributes)
    .filter((a: any) => a?.name)
    .map((a: any) => ({ name: a.name, color: a.color }));
}

// About (single-line)
const about: string = company?.about || "";

// Utils
function clamp(str: string, n: number) {
  if (!str) return "";
  return str.length > n ? str.slice(0, n - 1) + "…" : str;
}
function textColorFor(bg?: string) {
  if (!bg || !bg.startsWith("#") || (bg.length !== 7 && bg.length !== 4)) return "white";
  const hex = bg.length === 4
    ? `#${bg[1]}${bg[1]}${bg[2]}${bg[2]}${bg[3]}${bg[3]}`
    : bg;
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  const l = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
  return l > 0.6 ? "black" : "white";
}
---

<article class="card border border-base-200 bg-base-100 hover:shadow-lg transition h-full" style="contain: content;">
  <a href={`/company/${company.slug}`} class="block p-4">
    <!-- Header -->
    <div class="flex items-start gap-3">
      {logoUrl
        ? <img src={logoUrl} alt={logoAlt} class="h-10 w-10 shrink-0 object-contain rounded bg-base-200" loading="lazy" />
        : <div class="h-10 w-10 shrink-0 rounded bg-base-200" />}

      <div class="min-w-0 flex-1">
        <div class="flex items-center gap-2 flex-wrap">
          <h3 class="font-semibold text-lg leading-tight truncate">{company.name}</h3>
          {sentiment && (
            <span class={`badge ${sentimentClass} normal-case text-xs`}>{sentiment.toUpperCase()}</span>
          )}
          {rating !== undefined && (
            <span class="badge badge-ghost text-xs normal-case">{Math.round(rating * 10) / 10}/5</span>
          )}
        </div>
        {/* category line removed */}
      </div>
    </div>

    {/* Reasoning summary */}
    {reasoningSummary && (
      <p class="mt-3 text-sm opacity-90 line-clamp-2">{clamp(reasoningSummary, 180)}</p>
    )}

    {/* About (one-liner) */}
    {about && (
      <p class="mt-2 text-sm opacity-70 line-clamp-1">{clamp(about, 120)}</p>
    )}

    {/* Reasoning tags (colored) */}
    {reasoningTags.length > 0 && (
      <div class="mt-3 flex flex-wrap gap-2">
        {reasoningTags.slice(0, 3).map((t) => (
          <span class="badge text-xs"
                style={`background:${t.color ?? "var(--fallback-bc, #444)"};color:${textColorFor(t.color)};border:none`}>
            {t.name}
          </span>
        ))}
        {reasoningTags.length > 3 && <span class="badge badge-outline text-xs">+{reasoningTags.length - 3}</span>}
      </div>
    )}

    {/* General tags */}
    {tags.length > 0 && (
      <div class="mt-3 flex flex-wrap gap-2">
        {tags.slice(0, 3).map((t) => <span class="badge badge-ghost text-xs">{t}</span>)}
        {tags.length > 3 && <span class="badge badge-outline text-xs">+{tags.length - 3}</span>}
      </div>
    )}
  </a>
</article>
