---
// CompanyCard.astro
import type { Company } from "../types/company";

const { company } = Astro.props as { company: Company };

// Logo (Strapi v5 direct shape)
const logoUrl = company?.logo?.url || "";
const logoAlt = company?.logo?.alternativeText || `${company?.name} logo`;

// Category (handle all shapes)
const category =
  company?.category?.data?.attributes?.name ||
  company?.category?.attributes?.name ||
  company?.category?.name ||
  "";

// Tags (names only)
const tags: string[] = (company?.tags?.data ?? [])
  .map((t: any) => t?.attributes?.name)
  .filter(Boolean);

// Sentiment (if populated on the list query)
const sentiment = company?.Evaluation?.sentiment as ("good" | "bad" | undefined);
const sentimentClass =
  sentiment === "good" ? "badge-success" :
  sentiment === "bad"  ? "badge-error"   : "";

// Optional short blurb if you included Evaluation.summary in the query
const summary = company?.Evaluation?.summary || "";

function clamp(str: string, n: number) {
  if (!str) return "";
  return str.length > n ? str.slice(0, n - 1) + "â€¦" : str;
}
---

<article
  class="card border border-base-200 bg-base-100 hover:shadow-lg transition h-full"
  style="contain: content;"
>
  <a href={`/company/${company.slug}`} class="block p-4">
    <!-- Top row -->
    <div class="flex items-start gap-3">
      {logoUrl
        ? <img src={logoUrl} alt={logoAlt} class="h-10 w-10 shrink-0 object-contain rounded bg-base-200" loading="lazy" />
        : <div class="h-10 w-10 shrink-0 rounded bg-base-200" />}

      <div class="min-w-0 flex-1">
        <div class="flex items-center gap-2 flex-wrap">
          <h3 class="font-semibold text-lg leading-tight truncate">{company.name}</h3>
          {sentiment && (
            <span class={`badge ${sentimentClass} normal-case text-xs`}>
              {sentiment.toUpperCase()}
            </span>
          )}
        </div>
        {category && <p class="text-sm opacity-70 mt-0.5">{category}</p>}
      </div>
    </div>

    <!-- Middle: tiny summary (optional; hidden if empty) -->
    {summary && (
      <p class="mt-3 text-sm opacity-90 line-clamp-2">
        {clamp(summary, 160)}
      </p>
    )}

    <!-- Bottom: a few tags -->
    {tags.length > 0 && (
      <div class="mt-3 flex flex-wrap gap-2">
        {tags.slice(0, 3).map((t) => <span class="badge badge-ghost text-xs">{t}</span>)}
        {tags.length > 3 && <span class="badge badge-outline text-xs">+{tags.length - 3}</span>}
      </div>
    )}
  </a>
</article>
