---
import type { Company } from "../types/company";

const { company } = Astro.props as { company: Company };

/* -------- Core (robust media + category) -------- */
// Media can be {url,...} OR {data:{attributes:{url,...}}}
const _logo =
  (company as any)?.logo?.data?.attributes ??
  (company as any)?.logo?.attributes ??
  (company as any)?.logo ??
  {};

const logoUrl: string = _logo?.url || "";
const logoAlt: string = _logo?.alternativeText || `${company?.name} logo`;

// Category can be nested or flat; color is optional
const _cat =
  (company as any)?.category?.data?.attributes ??
  (company as any)?.category?.attributes ??
  (company as any)?.category ??
  {};

const categoryName: string = _cat?.name || "";
const categoryColor: string | undefined = _cat?.color;

const about: string = company?.about || "";

/* -------- Public tags -------- */
const tags: string[] = ((company as any)?.tags?.data ?? [])
  .map((t: any) => t?.attributes?.name)
  .filter(Boolean);

/* -------- Evaluation + reasoning tags -------- */
const evaln: any = (company as any)?.Evaluation ?? {};
const reasoningSummary: string =
  evaln?.summary ||
  (company as any)?.reason?.data?.attributes?.description ||
  "";

let reasoningTags: { name: string; color?: string }[] = [];
const rt = evaln?.reasoning_tags;
if (Array.isArray(rt?.data)) {
  reasoningTags = rt.data
    .map((x: any) => x?.attributes)
    .filter((a: any) => a?.name)
    .map((a: any) => ({ name: a.name, color: a.color }));
} else if (Array.isArray(rt)) {
  reasoningTags = rt
    .map((t: any) => t?.attributes ?? t)
    .filter((x: any) => x?.name)
    .map((x: any) => ({ name: x.name, color: x.color }));
}

/* -------- Utils -------- */
function clamp(s = "", n = 160) { return s.length > n ? s.slice(0, n - 1) + "â€¦" : s; }
function textColorFor(bg?: string) {
  if (!bg || !bg.startsWith("#")) return "white";
  const hex = bg.length === 4 ? `#${bg[1]}${bg[1]}${bg[2]}${bg[2]}${bg[3]}${bg[3]}` : bg;
  const r = parseInt(hex.slice(1,3),16), g = parseInt(hex.slice(3,5),16), b = parseInt(hex.slice(5,7),16);
  const l = (0.299*r + 0.587*g + 0.114*b) / 255;
  return l > 0.6 ? "black" : "white";
}
---

<article class="relative rounded-xl border border-base-300 bg-base-100 shadow-sm transition hover:shadow-md">
  <a href={`/company/${company.slug}`} class="block p-4">
    <!-- Header: bigger logo; name + category stacked -->
    <div class="flex items-start gap-3">
      {logoUrl
        ? <img src={logoUrl} alt={logoAlt}
               class="h-12 w-12 sm:h-14 sm:w-14 shrink-0 rounded bg-base-200 object-contain"
               loading="lazy" />
        : <div class="h-12 w-12 sm:h-14 sm:w-14 shrink-0 rounded bg-base-200" />}
      <div class="min-w-0 flex-1">
        <h3 class="font-semibold text-lg leading-snug break-words">{company.name}</h3>
        {categoryName && (
          <div class="mt-1">
            <span
              class={`inline-flex items-center rounded-full px-2 py-[2px] text-xs font-medium ${
                categoryColor ? "" : "badge badge-ghost text-xs"
              }`}
              style={categoryColor
                ? `background:${categoryColor};color:${textColorFor(categoryColor)};border:none`
                : ""}
            >
              {categoryName}
            </span>
          </div>
        )}
      </div>
    </div>

    {about && (
      <p class="mt-3 text-sm text-base-content/90 break-words">{clamp(about, 180)}</p>
    )}

    {reasoningSummary && (
      <p class="mt-3 text-sm text-base-content/90 break-words">
        <span class="font-semibold">Reason:</span> {clamp(reasoningSummary, 180)}
      </p>
    )}

    {reasoningTags.length > 0 && (
      <div class="mt-2 flex flex-wrap gap-2">
        {reasoningTags.slice(0, 6).map((t) => (
          <span class="badge text-xs"
                style={`background:${t.color ?? "var(--fallback-bc,#444)"};color:${textColorFor(t.color)};border:none`}>
            {t.name}
          </span>
        ))}
        {reasoningTags.length > 6 && (
          <span class="badge badge-outline text-xs">+{reasoningTags.length - 6}</span>
        )}
      </div>
    )}

    {tags.length > 0 && (
      <div class="mt-3 flex flex-wrap gap-2">
        {tags.slice(0, 3).map((t) => <span class="badge badge-ghost text-xs">{t}</span>)}
        {tags.length > 3 && <span class="badge badge-outline text-xs">+{tags.length - 3}</span>}
      </div>
    )}
  </a>
</article>
